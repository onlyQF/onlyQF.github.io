<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>About Me</title>
    <url>/2022/06/02/About%20me/</url>
    <content><![CDATA[<p><strong>Name</strong>: Jason Qi 齐飞</p>
<p><strong>Education</strong>:<br>          ① 2014-2018:  B.S degree from Hohai University,Nanjing,Jiangsu;<br>          ② 2018-2021:  M.S degree from Beijing Institute of Technology,Beijing,China;<br>          ③ 2021-now:  currently working in SAIC Motor Co.Ltd,Shanghai,China;</p>
<p><strong>Reaearch interest</strong>:<br>          Autonomous driving vehicle，<br>          Motion planning，<br>          ROS2，<br>          Computer vision，<br>          Deep learning，etc;</p>
<p><strong>Publication</strong>:<br>         ① Qi, F., et al. “Head pose and eye gaze feature recognition based prediction of drivers’ maneuvers.” CSAA&#x2F;IET International Conference on Aircraft Utility Systems (AUS 2020). Vol. 2020. IET, 2020.<br>         ② Qi, Fei, et al. “A Discrete Operational Point Control-based Adaptive Dynamic Coordination Control Strategy for HEV.” 2021 IEEE 10th Data Driven Control and Learning Systems Conference (DDCLS). IEEE, 2021.</p>
]]></content>
  </entry>
  <entry>
    <title>ROS2 Notes</title>
    <url>/2022/06/01/ROS2-Notes/</url>
    <content><![CDATA[<h1 id="一：debugger-c-ros2-in-vscode"><a href="#一：debugger-c-ros2-in-vscode" class="headerlink" title="一：debugger c++ ros2  in vscode"></a>一：debugger c++ ros2  in vscode</h1><p>a method to debug a C++ node usign VSCode on ROS2 Foxy (Ubuntu).</p>
<ol>
<li>Compile your C++ package with the symbols:</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Run the GDB Server in a localhost:port</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ros2 run --prefix &#x27;gdbserver localhost:3000&#x27; package_name executable_name</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3">
<li><p>Open VSCode on your workspace, open the debug section (side bar) and create new launch.json configuration file for debugging. Configure as follow:</p>
<p> {<br> “version”: “0.2.0”,<br> “configurations”: [<br> {<br>     “name”: “C++ Debugger”,<br>     “request”: “launch”,<br>     “type”: “cppdbg”,<br>     “miDebuggerServerAddress”: “localhost:3000”,<br>     “cwd”: “&#x2F;“,<br>     “program”: “[build-path-executable]”<br> }<br> ]</p>
</li>
</ol>
<p>}</p>
<p>Change [build-path-executable] by your executable build file. You can find this path on the console when you launch the server.</p>
<ol start="4">
<li>Run the debugger and use VSCode to debug your code.</li>
</ol>
<p>Here is a more detail explanation <a href="https://gist.github.com/JADC362/a4425">https://gist.github.com/JADC362/a4425</a>…</p>
<p>#二：简单的ros2的发布节点撰写</p>
<h2 id="1：-编写发布者节点代码"><a href="#1：-编写发布者节点代码" class="headerlink" title="1： 编写发布者节点代码"></a>1： 编写发布者节点代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;chrono&gt;</span><br><span class="line">#include &lt;functional&gt;</span><br><span class="line">#include &lt;memory&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &quot;rclcpp/rclcpp.hpp&quot;</span><br><span class="line">#include &quot;std_msgs/msg/string.hpp&quot;</span><br><span class="line"></span><br><span class="line">using namespace std::chrono_literals;</span><br><span class="line"></span><br><span class="line">/* This example creates a subclass of Node and uses std::bind() to register a</span><br><span class="line">* member function as a callback from the timer. */</span><br><span class="line"></span><br><span class="line">class MinimalPublisher : public rclcpp::Node</span><br><span class="line">&#123;</span><br><span class="line">  public:</span><br><span class="line">    MinimalPublisher()</span><br><span class="line">    : Node(&quot;minimal_publisher&quot;), count_(0)</span><br><span class="line">    &#123;</span><br><span class="line">      publisher_ = this-&gt;create_publisher&lt;std_msgs::msg::String&gt;(&quot;topic&quot;, 10);</span><br><span class="line">      timer_ = this-&gt;create_wall_timer(</span><br><span class="line">      500ms, std::bind(&amp;MinimalPublisher::timer_callback, this));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  private:</span><br><span class="line">    void timer_callback()</span><br><span class="line">    &#123;</span><br><span class="line">      auto message = std_msgs::msg::String();</span><br><span class="line">      message.data = &quot;Hello, world! &quot; + std::to_string(count_++);</span><br><span class="line">      RCLCPP_INFO(this-&gt;get_logger(), &quot;Publishing: &#x27;%s&#x27;&quot;, message.data.c_str());</span><br><span class="line">      publisher_-&gt;publish(message);</span><br><span class="line">    &#125;</span><br><span class="line">    rclcpp::TimerBase::SharedPtr timer_;</span><br><span class="line">    rclcpp::Publisher&lt;std_msgs::msg::String&gt;::SharedPtr publisher_;</span><br><span class="line">    size_t count_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main(int argc, char * argv[])</span><br><span class="line">&#123;</span><br><span class="line">  rclcpp::init(argc, argv);</span><br><span class="line">  rclcpp::spin(std::make_shared&lt;MinimalPublisher&gt;());</span><br><span class="line">  rclcpp::shutdown();</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2：修改Cmakelists-txt和packageXML文件"><a href="#2：修改Cmakelists-txt和packageXML文件" class="headerlink" title="2：修改Cmakelists.txt和packageXML文件"></a>2：修改Cmakelists.txt和packageXML文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;depend&gt;rclcpp&lt;/depend&gt;</span><br><span class="line">&lt;depend&gt;std_msgs&lt;/depend&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find_package(rclcpp REQUIRED)</span><br><span class="line">find_package(std_msgs REQUIRED)</span><br><span class="line"></span><br><span class="line">add_executable(talker src/publisher_member_function.cpp)</span><br><span class="line">ament_target_dependencies(talker rclcpp std_msgs)</span><br></pre></td></tr></table></figure>

<p>Finally, add the install(TARGETS…) section so ros2 run can find your executable:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">install(TARGETS</span><br><span class="line">  talker</span><br><span class="line">  DESTINATION lib/$&#123;PROJECT_NAME&#125;)</span><br></pre></td></tr></table></figure>

<p>最终的Cmakelists.txt的文件如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.5)</span><br><span class="line">project(cpp_pubsub)</span><br><span class="line"></span><br><span class="line"># Default to C++14</span><br><span class="line">if(NOT CMAKE_CXX_STANDARD)</span><br><span class="line">  set(CMAKE_CXX_STANDARD 14)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line">if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;)</span><br><span class="line">  add_compile_options(-Wall -Wextra -Wpedantic)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line">find_package(ament_cmake REQUIRED)</span><br><span class="line">find_package(rclcpp REQUIRED)</span><br><span class="line">find_package(std_msgs REQUIRED)</span><br><span class="line"></span><br><span class="line">add_executable(talker src/publisher_member_function.cpp)</span><br><span class="line">ament_target_dependencies(talker rclcpp std_msgs)</span><br><span class="line"></span><br><span class="line">install(TARGETS</span><br><span class="line">  talker</span><br><span class="line">  DESTINATION lib/$&#123;PROJECT_NAME&#125;)</span><br><span class="line"></span><br><span class="line">ament_package()</span><br></pre></td></tr></table></figure>

<h1 id="三：简单的ros2订阅者节点的撰写"><a href="#三：简单的ros2订阅者节点的撰写" class="headerlink" title="三：简单的ros2订阅者节点的撰写"></a>三：简单的ros2订阅者节点的撰写</h1><h2 id="1：编写订阅者节点代码"><a href="#1：编写订阅者节点代码" class="headerlink" title="1：编写订阅者节点代码"></a>1：编写订阅者节点代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;memory&gt;</span><br><span class="line"></span><br><span class="line">#include &quot;rclcpp/rclcpp.hpp&quot;</span><br><span class="line">#include &quot;std_msgs/msg/string.hpp&quot;</span><br><span class="line">using std::placeholders::_1;</span><br><span class="line"></span><br><span class="line">class MinimalSubscriber : public rclcpp::Node</span><br><span class="line">&#123;</span><br><span class="line">  public:</span><br><span class="line">    MinimalSubscriber()</span><br><span class="line">    : Node(&quot;minimal_subscriber&quot;)</span><br><span class="line">    &#123;</span><br><span class="line">      subscription_ = this-&gt;create_subscription&lt;std_msgs::msg::String&gt;(</span><br><span class="line">      &quot;topic&quot;, 10, std::bind(&amp;MinimalSubscriber::topic_callback, this, _1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  private:</span><br><span class="line">    void topic_callback(const std_msgs::msg::String::SharedPtr msg) const</span><br><span class="line">    &#123;</span><br><span class="line">      RCLCPP_INFO(this-&gt;get_logger(), &quot;I heard: &#x27;%s&#x27;&quot;, msg-&gt;data.c_str());</span><br><span class="line">    &#125;</span><br><span class="line">    rclcpp::Subscription&lt;std_msgs::msg::String&gt;::SharedPtr subscription_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main(int argc, char * argv[])</span><br><span class="line">&#123;</span><br><span class="line">  rclcpp::init(argc, argv);</span><br><span class="line">  rclcpp::spin(std::make_shared&lt;MinimalSubscriber&gt;());</span><br><span class="line">  rclcpp::shutdown();</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2：修改Cmakelists-txt和packageXML文件-1"><a href="#2：修改Cmakelists-txt和packageXML文件-1" class="headerlink" title="2：修改Cmakelists.txt和packageXML文件"></a>2：修改Cmakelists.txt和packageXML文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add_executable(listener src/subscriber_member_function.cpp)</span><br><span class="line">ament_target_dependencies(listener rclcpp std_msgs)</span><br><span class="line"></span><br><span class="line">install(TARGETS</span><br><span class="line">  talker</span><br><span class="line">  listener</span><br><span class="line">  DESTINATION lib/$&#123;PROJECT_NAME&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="3：-注："><a href="#3：-注：" class="headerlink" title="3： 注："></a>3： 注：</h2><p>一个功能包内可以有多个节点；<br>一个节点可以既往多个topic发布消息，也可以订阅多个topic的并做回调函数的处理；</p>
<h1 id="四：编写-srv文件，实现服务类型"><a href="#四：编写-srv文件，实现服务类型" class="headerlink" title="四：编写.srv文件，实现服务类型"></a>四：编写.srv文件，实现服务类型</h1><h2 id="1：-srv文件格式"><a href="#1：-srv文件格式" class="headerlink" title="1： srv文件格式"></a>1： srv文件格式</h2><p> int a<br> int b<br> &#x2F;—<br> int c<br> a b为服务接受的参数，c为返回的值；</p>
<h2 id="2：修改Cmakelists-txt和packageXML文件-2"><a href="#2：修改Cmakelists-txt和packageXML文件-2" class="headerlink" title="2：修改Cmakelists.txt和packageXML文件"></a>2：修改Cmakelists.txt和packageXML文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dependencies rclcpp example_interfaces</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3：-srv节点的代码的编写"><a href="#3：-srv节点的代码的编写" class="headerlink" title="3： srv节点的代码的编写"></a>3： srv节点的代码的编写</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;rclcpp/rclcpp.hpp&quot;</span><br><span class="line">#include &quot;example_interfaces/srv/add_two_ints.hpp&quot;//包含头文件</span><br><span class="line"></span><br><span class="line">#include &lt;memory&gt;</span><br><span class="line"></span><br><span class="line">void add(const std::shared_ptr&lt;example_interfaces::srv::AddTwoInts::Request&gt; request,</span><br><span class="line">          std::shared_ptr&lt;example_interfaces::srv::AddTwoInts::Response&gt;      response)</span><br><span class="line">&#123;</span><br><span class="line">  response-&gt;sum = request-&gt;a + request-&gt;b;</span><br><span class="line">  RCLCPP_INFO(rclcpp::get_logger(&quot;rclcpp&quot;), &quot;Incoming request\na: %ld&quot; &quot; b: %ld&quot;,</span><br><span class="line">                request-&gt;a, request-&gt;b);</span><br><span class="line">  RCLCPP_INFO(rclcpp::get_logger(&quot;rclcpp&quot;), &quot;sending back response: [%ld]&quot;, (long int)response-&gt;sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">  rclcpp::init(argc, argv);</span><br><span class="line"></span><br><span class="line">  std::shared_ptr&lt;rclcpp::Node&gt; node = rclcpp::Node::make_shared(&quot;add_two_ints_server&quot;);</span><br><span class="line"></span><br><span class="line">  rclcpp::Service&lt;example_interfaces::srv::AddTwoInts&gt;::SharedPtr service =</span><br><span class="line">    node-&gt;create_service&lt;example_interfaces::srv::AddTwoInts&gt;(&quot;add_two_ints&quot;, &amp;add);</span><br><span class="line"></span><br><span class="line">  RCLCPP_INFO(rclcpp::get_logger(&quot;rclcpp&quot;), &quot;Ready to add two ints.&quot;);</span><br><span class="line"></span><br><span class="line">  rclcpp::spin(node);</span><br><span class="line">  rclcpp::shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4：client端代码的编写"><a href="#4：client端代码的编写" class="headerlink" title="4：client端代码的编写"></a>4：client端代码的编写</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;rclcpp/rclcpp.hpp&quot;</span><br><span class="line">#include &quot;example_interfaces/srv/add_two_ints.hpp&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;chrono&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;memory&gt;</span><br><span class="line"></span><br><span class="line">using namespace std::chrono_literals;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">  rclcpp::init(argc, argv);</span><br><span class="line"></span><br><span class="line">  if (argc != 3) &#123;</span><br><span class="line">      RCLCPP_INFO(rclcpp::get_logger(&quot;rclcpp&quot;), &quot;usage: add_two_ints_client X Y&quot;);</span><br><span class="line">      return 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  std::shared_ptr&lt;rclcpp::Node&gt; node = rclcpp::Node::make_shared(&quot;add_two_ints_client&quot;);</span><br><span class="line">  rclcpp::Client&lt;example_interfaces::srv::AddTwoInts&gt;::SharedPtr client =</span><br><span class="line">    node-&gt;create_client&lt;example_interfaces::srv::AddTwoInts&gt;(&quot;add_two_ints&quot;);</span><br><span class="line"></span><br><span class="line">  auto request = std::make_shared&lt;example_interfaces::srv::AddTwoInts::Request&gt;();</span><br><span class="line">  request-&gt;a = atoll(argv[1]);</span><br><span class="line">  request-&gt;b = atoll(argv[2]);</span><br><span class="line"></span><br><span class="line">  while (!client-&gt;wait_for_service(1s)) &#123;</span><br><span class="line">    if (!rclcpp::ok()) &#123;</span><br><span class="line">      RCLCPP_ERROR(rclcpp::get_logger(&quot;rclcpp&quot;), &quot;Interrupted while waiting for the service. Exiting.&quot;);</span><br><span class="line">      return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    RCLCPP_INFO(rclcpp::get_logger(&quot;rclcpp&quot;), &quot;service not available, waiting again...&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  auto result = client-&gt;async_send_request(request);</span><br><span class="line">  // Wait for the result.</span><br><span class="line">  if (rclcpp::spin_until_future_complete(node, result) ==</span><br><span class="line">    rclcpp::FutureReturnCode::SUCCESS)</span><br><span class="line">  &#123;</span><br><span class="line">    RCLCPP_INFO(rclcpp::get_logger(&quot;rclcpp&quot;), &quot;Sum: %ld&quot;, result.get()-&gt;sum);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    RCLCPP_ERROR(rclcpp::get_logger(&quot;rclcpp&quot;), &quot;Failed to call service add_two_ints&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  rclcpp::shutdown();</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5：Cmakelsts-txt和packageXML文件的修改"><a href="#5：Cmakelsts-txt和packageXML文件的修改" class="headerlink" title="5：Cmakelsts.txt和packageXML文件的修改"></a>5：Cmakelsts.txt和packageXML文件的修改</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.5)</span><br><span class="line">project(cpp_srvcli)</span><br><span class="line"></span><br><span class="line">find_package(ament_cmake REQUIRED)</span><br><span class="line">find_package(rclcpp REQUIRED)</span><br><span class="line">find_package(example_interfaces REQUIRED)</span><br><span class="line"></span><br><span class="line">add_executable(server src/add_two_ints_server.cpp)</span><br><span class="line">ament_target_dependencies(server</span><br><span class="line">  rclcpp example_interfaces)</span><br><span class="line"></span><br><span class="line">add_executable(client src/add_two_ints_client.cpp)</span><br><span class="line">ament_target_dependencies(client</span><br><span class="line">  rclcpp example_interfaces)</span><br><span class="line"></span><br><span class="line">install(TARGETS</span><br><span class="line">  server</span><br><span class="line">  client</span><br><span class="line">  DESTINATION lib/$&#123;PROJECT_NAME&#125;)</span><br><span class="line"></span><br><span class="line">ament_package()</span><br></pre></td></tr></table></figure>

<h1 id="五：-msg文件的编写"><a href="#五：-msg文件的编写" class="headerlink" title="五：.msg文件的编写"></a>五：.msg文件的编写</h1><h2 id="1：在WS下src"><a href="#1：在WS下src" class="headerlink" title="1：在WS下src;"></a>1：在WS下src;</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd workspace/src</span><br></pre></td></tr></table></figure>
<h2 id="2-创建msg包，新建msg文件夹"><a href="#2-创建msg包，新建msg文件夹" class="headerlink" title="2:创建msg包，新建msg文件夹"></a>2:创建msg包，新建msg文件夹</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ros2 pkg create --build-type ament_cmake more_interfaces</span><br><span class="line">   mkdir more_interfaces/msg</span><br></pre></td></tr></table></figure>
<h2 id="3-创建msg文件"><a href="#3-创建msg文件" class="headerlink" title="3:创建msg文件"></a>3:创建msg文件</h2><p>Inside more_interfaces&#x2F;msg, create a new file AddressBook.msg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool FEMALE=true</span><br><span class="line">bool MALE=false</span><br><span class="line"></span><br><span class="line">string first_name</span><br><span class="line">string last_name</span><br><span class="line">bool gender</span><br><span class="line">uint8 age</span><br><span class="line">string address</span><br></pre></td></tr></table></figure>

<h2 id="4：修改Cmakelists和packageXML文件"><a href="#4：修改Cmakelists和packageXML文件" class="headerlink" title="4：修改Cmakelists和packageXML文件"></a>4：修改Cmakelists和packageXML文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;buildtool_depend&gt;rosidl_default_generators&lt;/buildtool_depend&gt;</span><br><span class="line"></span><br><span class="line">&lt;exec_depend&gt;rosidl_default_runtime&lt;/exec_depend&gt;</span><br><span class="line"></span><br><span class="line">&lt;member_of_group&gt;rosidl_interface_packages&lt;/member_of_group&gt;</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find_package(rosidl_default_generators REQUIRED)</span><br><span class="line"></span><br><span class="line">set(msg_files</span><br><span class="line">  &quot;msg/AddressBook.msg&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">rosidl_generate_interfaces($&#123;PROJECT_NAME&#125;</span><br><span class="line">  $&#123;msg_files&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">ament_export_dependencies(rosidl_default_runtime)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5：在其他包里面使用自定义msg"><a href="#5：在其他包里面使用自定义msg" class="headerlink" title="5：在其他包里面使用自定义msg"></a>5：在其他包里面使用自定义msg</h2><p>1：在功能包下，在所创建的msg文件夹下，创建src文件夹用来放置源文件<br>2：在main.cpp文件里包含头文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include “packagename/msg/msg.hpp” //为小写字母</span><br><span class="line"></span><br><span class="line">在用具体消息类创建对象时： packagename::msg::msgname obj;//msgname为原始定义的msgname为大写开头</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="六：创建包依赖其他包举例"><a href="#六：创建包依赖其他包举例" class="headerlink" title="六：创建包依赖其他包举例"></a>六：创建包依赖其他包举例</h1><h2 id="1-：文件组织分布"><a href="#1-：文件组织分布" class="headerlink" title="1 ：文件组织分布"></a>1 ：文件组织分布</h2><p>![alt text](&#x2F;home&#x2F;qifei&#x2F;Pictures&#x2F;Screenshot from 2022-05-04 01-27-00.png)<br>![](&#x2F;home&#x2F;qifei&#x2F;Pictures&#x2F;Screenshot from 2022-05-04 01-28-16.png)</p>
<h2 id="2-sm-node-包依赖其他四个包"><a href="#2-sm-node-包依赖其他四个包" class="headerlink" title="2 :sm_node 包依赖其他四个包"></a>2 :sm_node 包依赖其他四个包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ros2 pkg create sm_node --dependencies cem_park vehicle_msgs cem_diagnositi_msgs </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这样就可以在sm_node包里面使用其他几个包里面的消息类型等</p>
<h1 id="七：launch-文件使用"><a href="#七：launch-文件使用" class="headerlink" title="七：launch 文件使用"></a>七：launch 文件使用</h1><h2 id="1：Create-a-new-directory-to-store-your-launch-file"><a href="#1：Create-a-new-directory-to-store-your-launch-file" class="headerlink" title="1：Create a new directory to store your launch file:"></a>1：Create a new directory to store your launch file:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir launch</span><br></pre></td></tr></table></figure>

<h2 id="2：创建launch-py文件"><a href="#2：创建launch-py文件" class="headerlink" title="2：创建launch.py文件"></a>2：创建launch.py文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch launch/test_launch.py</span><br></pre></td></tr></table></figure>

<h2 id="3-文件解释"><a href="#3-文件解释" class="headerlink" title="3:文件解释"></a>3:文件解释</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from launch import LaunchDescription</span><br><span class="line">from launch_ros.actions import Node</span><br><span class="line"></span><br><span class="line">def generate_launch_description():</span><br><span class="line">    return LaunchDescription([</span><br><span class="line">        Node(</span><br><span class="line">            package=&#x27;turtlesim&#x27;,</span><br><span class="line">            namespace=&#x27;turtlesim1&#x27;,</span><br><span class="line">            executable=&#x27;turtlesim_node&#x27;,</span><br><span class="line">            name=&#x27;sim&#x27;</span><br><span class="line">        ),</span><br><span class="line">        Node(</span><br><span class="line">            package=&#x27;turtlesim&#x27;,</span><br><span class="line">            namespace=&#x27;turtlesim2&#x27;,</span><br><span class="line">            executable=&#x27;turtlesim_node&#x27;,</span><br><span class="line">            name=&#x27;sim&#x27;</span><br><span class="line">        ),</span><br><span class="line">        Node(</span><br><span class="line">            package=&#x27;turtlesim&#x27;,</span><br><span class="line">            executable=&#x27;mimic&#x27;,</span><br><span class="line">            name=&#x27;mimic&#x27;,</span><br><span class="line">            remappings=[</span><br><span class="line">                (&#x27;/input/pose&#x27;, &#x27;/turtlesim1/turtle1/pose&#x27;),</span><br><span class="line">                (&#x27;/output/cmd_vel&#x27;, &#x27;/turtlesim2/turtle1/cmd_vel&#x27;),</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure>

<h2 id="4：使用launch文件"><a href="#4：使用launch文件" class="headerlink" title="4：使用launch文件"></a>4：使用launch文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd launch</span><br><span class="line">ros2 launch turtlesim_mimic_launch.py</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>global variables in c/cpp</title>
    <url>/2022/06/01/global-variables-in-c-cpp/</url>
    <content><![CDATA[<h1 id="一：-how-to-use-global-variables-in-c-x2F-cpp"><a href="#一：-how-to-use-global-variables-in-c-x2F-cpp" class="headerlink" title="一： how to use global variables in c&#x2F;cpp"></a>一： how to use global variables in c&#x2F;cpp</h1><p>1:在 一个头文件中先声明全局变量，如 header.h</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifndef HEADER_H</span><br><span class="line">#define HEADER_H</span><br><span class="line"></span><br><span class="line">// any source file that includes this will be able to use &quot;global_x&quot;</span><br><span class="line">extern int global_x;//用extern 声明全局变量 global_x</span><br><span class="line"></span><br><span class="line">void print_global_x();</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>
<p>2：在其他代码文件中使用该全局变量</p>
<p>1：在source1.cpp中使用<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;header.h&quot;//先将头文件包括进来</span><br><span class="line"></span><br><span class="line">// since global_x still needs to be defined somewhere,</span><br><span class="line">// we define it (for example) in this source file</span><br><span class="line">int global_x; </span><br><span class="line">//*在这里定义一次，记住变量可以多次声明但是只能定义一次，因此在这里定义一次后，在其他文件中使用只需要声明不可以再次定义*//</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //set global_x here:</span><br><span class="line">    global_x = 5;//在这里使用全局变量</span><br><span class="line"></span><br><span class="line">    print_global_x();//在这里使用全局函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br> 2：在source 2中使用全局函数<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;header.h&quot;</span><br><span class="line"></span><br><span class="line">void print_global_x()//在其他文件中定义了该全局函数</span><br><span class="line">&#123;</span><br><span class="line">    //print global_x here:</span><br><span class="line">    std::cout &lt;&lt; global_x &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h1 id="二：函数形参和实参的差别"><a href="#二：函数形参和实参的差别" class="headerlink" title="二：函数形参和实参的差别"></a>二：函数形参和实参的差别</h1><p>只要是声明函数和定义函数的参数都属于形参，只有在主函数中使用的才是实参；<br>在定定义函数或类的时候，只需要参数的类型定义形参；</p>
]]></content>
  </entry>
</search>
